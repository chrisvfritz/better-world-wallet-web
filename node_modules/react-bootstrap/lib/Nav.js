'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _interopRequireDefault = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _React$cloneElement = require('react');

var _React$cloneElement2 = _interopRequireDefault(_React$cloneElement);

var _BootstrapMixin = require('./BootstrapMixin');

var _BootstrapMixin2 = _interopRequireDefault(_BootstrapMixin);

var _CollapsibleMixin = require('./CollapsibleMixin');

var _CollapsibleMixin2 = _interopRequireDefault(_CollapsibleMixin);

var _classNames = require('classnames');

var _classNames2 = _interopRequireDefault(_classNames);

var _domUtils = require('./utils/domUtils');

var _domUtils2 = _interopRequireDefault(_domUtils);

var _ValidComponentChildren = require('./utils/ValidComponentChildren');

var _ValidComponentChildren2 = _interopRequireDefault(_ValidComponentChildren);

var _createChainedFunction = require('./utils/createChainedFunction');

var _createChainedFunction2 = _interopRequireDefault(_createChainedFunction);

var Nav = _React$cloneElement2['default'].createClass({
  displayName: 'Nav',

  mixins: [_BootstrapMixin2['default'], _CollapsibleMixin2['default']],

  propTypes: {
    activeHref: _React$cloneElement2['default'].PropTypes.string,
    activeKey: _React$cloneElement2['default'].PropTypes.any,
    bsStyle: _React$cloneElement2['default'].PropTypes.oneOf(['tabs', 'pills']),
    stacked: _React$cloneElement2['default'].PropTypes.bool,
    justified: _React$cloneElement2['default'].PropTypes.bool,
    onSelect: _React$cloneElement2['default'].PropTypes.func,
    collapsable: _React$cloneElement2['default'].PropTypes.bool,
    expanded: _React$cloneElement2['default'].PropTypes.bool,
    navbar: _React$cloneElement2['default'].PropTypes.bool,
    eventKey: _React$cloneElement2['default'].PropTypes.any,
    pullRight: _React$cloneElement2['default'].PropTypes.bool,
    right: _React$cloneElement2['default'].PropTypes.bool
  },

  getDefaultProps: function getDefaultProps() {
    return {
      bsClass: 'nav'
    };
  },

  getCollapsibleDOMNode: function getCollapsibleDOMNode() {
    return _React$cloneElement2['default'].findDOMNode(this);
  },

  getCollapsibleDimensionValue: function getCollapsibleDimensionValue() {
    var node = _React$cloneElement2['default'].findDOMNode(this.refs.ul),
        height = node.offsetHeight,
        computedStyles = _domUtils2['default'].getComputedStyles(node);

    return height + parseInt(computedStyles.marginTop, 10) + parseInt(computedStyles.marginBottom, 10);
  },

  render: function render() {
    var classes = this.props.collapsable ? this.getCollapsibleClassSet() : {};

    classes['navbar-collapse'] = this.props.collapsable;

    if (this.props.navbar && !this.props.collapsable) {
      return this.renderUl();
    }

    return _React$cloneElement2['default'].createElement(
      'nav',
      _extends({}, this.props, { className: _classNames2['default'](this.props.className, classes) }),
      this.renderUl()
    );
  },

  renderUl: function renderUl() {
    var classes = this.getBsClassSet();

    classes['nav-stacked'] = this.props.stacked;
    classes['nav-justified'] = this.props.justified;
    classes['navbar-nav'] = this.props.navbar;
    classes['pull-right'] = this.props.pullRight;
    classes['navbar-right'] = this.props.right;

    return _React$cloneElement2['default'].createElement(
      'ul',
      _extends({}, this.props, { className: _classNames2['default'](this.props.className, classes), ref: 'ul' }),
      _ValidComponentChildren2['default'].map(this.props.children, this.renderNavItem)
    );
  },

  getChildActiveProp: function getChildActiveProp(child) {
    if (child.props.active) {
      return true;
    }
    if (this.props.activeKey != null) {
      if (child.props.eventKey === this.props.activeKey) {
        return true;
      }
    }
    if (this.props.activeHref != null) {
      if (child.props.href === this.props.activeHref) {
        return true;
      }
    }

    return child.props.active;
  },

  renderNavItem: function renderNavItem(child, index) {
    return _React$cloneElement.cloneElement(child, {
      active: this.getChildActiveProp(child),
      activeKey: this.props.activeKey,
      activeHref: this.props.activeHref,
      onSelect: _createChainedFunction2['default'](child.props.onSelect, this.props.onSelect),
      key: child.key ? child.key : index,
      navItem: true
    });
  }
});

exports['default'] = Nav;
module.exports = exports['default'];